
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002148  000021dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  000021f6  2**0
                  ALLOC
  3 .stab         00002484  00000000  00000000  000021f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014b0  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000096c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                         main() Function                                     *
 *******************************************************************************/

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ae 97       	sbiw	r28, 0x2e	; 46
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	// Enable I-bit
	SREG |=(1<<7);
     b5a:	af e5       	ldi	r26, 0x5F	; 95
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	ef e5       	ldi	r30, 0x5F	; 95
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	80 68       	ori	r24, 0x80	; 128
     b66:	8c 93       	st	X, r24
	 * Parity is disabled
	 * 1-stop bit
	 * baud rate =9600
	 *
	 */
	UART_ConfigType UART_Config={Asynchronous_Double_Speed_Mode,MODE_8_BITS,PARITY_DISABLED,ONE_STOP_BIT,9600};
     b68:	ce 01       	movw	r24, r28
     b6a:	01 96       	adiw	r24, 0x01	; 1
     b6c:	99 a3       	std	Y+33, r25	; 0x21
     b6e:	88 a3       	std	Y+32, r24	; 0x20
     b70:	e3 e7       	ldi	r30, 0x73	; 115
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	fb a3       	std	Y+35, r31	; 0x23
     b76:	ea a3       	std	Y+34, r30	; 0x22
     b78:	f6 e0       	ldi	r31, 0x06	; 6
     b7a:	fc a3       	std	Y+36, r31	; 0x24
     b7c:	ea a1       	ldd	r30, Y+34	; 0x22
     b7e:	fb a1       	ldd	r31, Y+35	; 0x23
     b80:	00 80       	ld	r0, Z
     b82:	8a a1       	ldd	r24, Y+34	; 0x22
     b84:	9b a1       	ldd	r25, Y+35	; 0x23
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	9b a3       	std	Y+35, r25	; 0x23
     b8a:	8a a3       	std	Y+34, r24	; 0x22
     b8c:	e8 a1       	ldd	r30, Y+32	; 0x20
     b8e:	f9 a1       	ldd	r31, Y+33	; 0x21
     b90:	00 82       	st	Z, r0
     b92:	88 a1       	ldd	r24, Y+32	; 0x20
     b94:	99 a1       	ldd	r25, Y+33	; 0x21
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	99 a3       	std	Y+33, r25	; 0x21
     b9a:	88 a3       	std	Y+32, r24	; 0x20
     b9c:	9c a1       	ldd	r25, Y+36	; 0x24
     b9e:	91 50       	subi	r25, 0x01	; 1
     ba0:	9c a3       	std	Y+36, r25	; 0x24
     ba2:	ec a1       	ldd	r30, Y+36	; 0x24
     ba4:	ee 23       	and	r30, r30
     ba6:	51 f7       	brne	.-44     	; 0xb7c <main+0x36>
	UART_init(&UART_Config);
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <UART_init>

	/*	Initialize I2C with :
	 * 400 kbit/sec
	 * Master address = 0x01
	 */
	TWI_ConfigType TWI_Config={400000,0x01};
     bb0:	ce 01       	movw	r24, r28
     bb2:	07 96       	adiw	r24, 0x07	; 7
     bb4:	9e a3       	std	Y+38, r25	; 0x26
     bb6:	8d a3       	std	Y+37, r24	; 0x25
     bb8:	ee e6       	ldi	r30, 0x6E	; 110
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	f8 a7       	std	Y+40, r31	; 0x28
     bbe:	ef a3       	std	Y+39, r30	; 0x27
     bc0:	f5 e0       	ldi	r31, 0x05	; 5
     bc2:	f9 a7       	std	Y+41, r31	; 0x29
     bc4:	ef a1       	ldd	r30, Y+39	; 0x27
     bc6:	f8 a5       	ldd	r31, Y+40	; 0x28
     bc8:	00 80       	ld	r0, Z
     bca:	8f a1       	ldd	r24, Y+39	; 0x27
     bcc:	98 a5       	ldd	r25, Y+40	; 0x28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	98 a7       	std	Y+40, r25	; 0x28
     bd2:	8f a3       	std	Y+39, r24	; 0x27
     bd4:	ed a1       	ldd	r30, Y+37	; 0x25
     bd6:	fe a1       	ldd	r31, Y+38	; 0x26
     bd8:	00 82       	st	Z, r0
     bda:	8d a1       	ldd	r24, Y+37	; 0x25
     bdc:	9e a1       	ldd	r25, Y+38	; 0x26
     bde:	01 96       	adiw	r24, 0x01	; 1
     be0:	9e a3       	std	Y+38, r25	; 0x26
     be2:	8d a3       	std	Y+37, r24	; 0x25
     be4:	99 a5       	ldd	r25, Y+41	; 0x29
     be6:	91 50       	subi	r25, 0x01	; 1
     be8:	99 a7       	std	Y+41, r25	; 0x29
     bea:	e9 a5       	ldd	r30, Y+41	; 0x29
     bec:	ee 23       	and	r30, r30
     bee:	51 f7       	brne	.-44     	; 0xbc4 <main+0x7e>
	TWI_init(&TWI_Config);
     bf0:	ce 01       	movw	r24, r28
     bf2:	07 96       	adiw	r24, 0x07	; 7
     bf4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <TWI_init>

	/*	initialize Motor	*/
	DcMotor_Init();
     bf8:	0e 94 ad 08 	call	0x115a	; 0x115a <DcMotor_Init>
	/* Initialize the buzzer */
	Buzzer_init();
     bfc:	0e 94 84 08 	call	0x1108	; 0x1108 <Buzzer_init>


	/*	Timer1 configurations to calculate 1 sec*/
	Timer1_ConfigType TIMER1_Config = {0,CTC_MODE, F_CPU_256, 31250};
     c00:	ce 01       	movw	r24, r28
     c02:	0c 96       	adiw	r24, 0x0c	; 12
     c04:	9b a7       	std	Y+43, r25	; 0x2b
     c06:	8a a7       	std	Y+42, r24	; 0x2a
     c08:	e8 e6       	ldi	r30, 0x68	; 104
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	fd a7       	std	Y+45, r31	; 0x2d
     c0e:	ec a7       	std	Y+44, r30	; 0x2c
     c10:	f6 e0       	ldi	r31, 0x06	; 6
     c12:	fe a7       	std	Y+46, r31	; 0x2e
     c14:	ec a5       	ldd	r30, Y+44	; 0x2c
     c16:	fd a5       	ldd	r31, Y+45	; 0x2d
     c18:	00 80       	ld	r0, Z
     c1a:	8c a5       	ldd	r24, Y+44	; 0x2c
     c1c:	9d a5       	ldd	r25, Y+45	; 0x2d
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	9d a7       	std	Y+45, r25	; 0x2d
     c22:	8c a7       	std	Y+44, r24	; 0x2c
     c24:	ea a5       	ldd	r30, Y+42	; 0x2a
     c26:	fb a5       	ldd	r31, Y+43	; 0x2b
     c28:	00 82       	st	Z, r0
     c2a:	8a a5       	ldd	r24, Y+42	; 0x2a
     c2c:	9b a5       	ldd	r25, Y+43	; 0x2b
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	9b a7       	std	Y+43, r25	; 0x2b
     c32:	8a a7       	std	Y+42, r24	; 0x2a
     c34:	9e a5       	ldd	r25, Y+46	; 0x2e
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	9e a7       	std	Y+46, r25	; 0x2e
     c3a:	ee a5       	ldd	r30, Y+46	; 0x2e
     c3c:	ee 23       	and	r30, r30
     c3e:	51 f7       	brne	.-44     	; 0xc14 <main+0xce>
	Timer1_init(&TIMER1_Config);
     c40:	ce 01       	movw	r24, r28
     c42:	0c 96       	adiw	r24, 0x0c	; 12
     c44:	0e 94 cb 0c 	call	0x1996	; 0x1996 <Timer1_init>
	/*	Set the callback function of timer1*/
	Timer1_setCallBack(timer1ControlCallBack);
     c48:	8a e7       	ldi	r24, 0x7A	; 122
     c4a:	96 e0       	ldi	r25, 0x06	; 6
     c4c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <Timer1_setCallBack>




	/* looping until HMI send ECU_READY signal */
	while (UART_recieveByte() != ECU_READY);
     c50:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
     c54:	8f 3f       	cpi	r24, 0xFF	; 255
     c56:	e1 f7       	brne	.-8      	; 0xc50 <main+0x10a>
	/* sending to HMI_ECU ECU_READY signal */
	UART_sendByte(ECU_READY);
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
	uint8 reEnteredPassword[PASSWORD_SIZE+2];

	while(1)
	{
		/* receive the password from HMI_ECU */
		receivePassword(password);
     c5e:	ce 01       	movw	r24, r28
     c60:	42 96       	adiw	r24, 0x12	; 18
     c62:	0e 94 63 06 	call	0xcc6	; 0xcc6 <receivePassword>
		/* receive the re entered password from HMI_ECU */
		receivePassword(reEnteredPassword);
     c66:	ce 01       	movw	r24, r28
     c68:	49 96       	adiw	r24, 0x19	; 25
     c6a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <receivePassword>
		/* Check the two passwords */
		checkPassword(password,reEnteredPassword);
     c6e:	ce 01       	movw	r24, r28
     c70:	42 96       	adiw	r24, 0x12	; 18
     c72:	9e 01       	movw	r18, r28
     c74:	27 5e       	subi	r18, 0xE7	; 231
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	b9 01       	movw	r22, r18
     c7a:	0e 94 86 06 	call	0xd0c	; 0xd0c <checkPassword>

		/* if password matched we are in inner menu
		 *  '+' : Open Door
		 * '-' : change Pass
		 */
		if(g_passCorrectFlag==1)
     c7e:	80 91 7a 00 	lds	r24, 0x007A
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	61 f7       	brne	.-40     	; 0xc5e <main+0x118>
		{

			while(1)
			{
				/* receive the password from HMI_ECU */
				receivePassword(reEnteredPassword);
     c86:	ce 01       	movw	r24, r28
     c88:	49 96       	adiw	r24, 0x19	; 25
     c8a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <receivePassword>
				/* check that received password with the one saved in EEPROM */
				checkPasswordInEEPROM(reEnteredPassword);
     c8e:	ce 01       	movw	r24, r28
     c90:	49 96       	adiw	r24, 0x19	; 25
     c92:	0e 94 50 07 	call	0xea0	; 0xea0 <checkPasswordInEEPROM>
				/* if user wants to change password and entered the old one correctly*/
				if(g_changePassFlag==1)
     c96:	80 91 7c 00 	lds	r24, 0x007C
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <main+0x15e>
				{
					/* Clear the change password flag	*/
					g_changePassFlag=0;
     c9e:	10 92 7c 00 	sts	0x007C, r1
     ca2:	dd cf       	rjmp	.-70     	; 0xc5e <main+0x118>
					/* Break to outer while(1) which has outer menu	*/
					break;
				}
				/*	if user entered the password wrong 3 consecutive times	*/
				if(g_consecWrongPass==3)
     ca4:	80 91 7d 00 	lds	r24, 0x007D
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	69 f7       	brne	.-38     	; 0xc86 <main+0x140>
				{
					/* Clear the consecutive password counter	*/
					g_consecWrongPass=0;
     cac:	10 92 7d 00 	sts	0x007D, r1
					/* Clear the seconds counter to start count from beginning	*/
					g_secondsCount=0;
     cb0:	10 92 7b 00 	sts	0x007B, r1
					/*	Activate Buzzer */
					Buzzer_on();
     cb4:	0e 94 95 08 	call	0x112a	; 0x112a <Buzzer_on>
					/* Wait until 60 seconds are passed*/
					while(g_secondsCount<60);
     cb8:	80 91 7b 00 	lds	r24, 0x007B
     cbc:	8c 33       	cpi	r24, 0x3C	; 60
     cbe:	e0 f3       	brcs	.-8      	; 0xcb8 <main+0x172>
					/*	De-activate the buzzer */
					Buzzer_off();
     cc0:	0e 94 a1 08 	call	0x1142	; 0x1142 <Buzzer_off>
     cc4:	e0 cf       	rjmp	.-64     	; 0xc86 <main+0x140>

00000cc6 <receivePassword>:
 *******************************************************************************/


/* Function to receive the password from HMI_ECU*/
void receivePassword(uint8* password)
{
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <receivePassword+0x6>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
	/* Loop untill the HMI_ECU is ready to send the password*/
	while (UART_recieveByte() != SEND_PASSWORD);
     cd4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <receivePassword+0xe>
	UART_sendByte(CONFIRM_SEND_PASSWORD);
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
	/* Receive the password from HMI_ECU	*/
	UART_receiveString(password);
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <UART_receiveString>
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <timer1ControlCallBack>:

/*	This function is called every 1 second passed in timer1*/
void timer1ControlCallBack()
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	/* Increment the seconds counter */
	g_secondsCount++;
     cfc:	80 91 7b 00 	lds	r24, 0x007B
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 7b 00 	sts	0x007B, r24
}
     d06:	cf 91       	pop	r28
     d08:	df 91       	pop	r29
     d0a:	08 95       	ret

00000d0c <checkPassword>:

/* Function to check if two passwords are matched or not*/
void checkPassword(uint8*password,uint8*reEnteredPassword)
{
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	63 97       	sbiw	r28, 0x13	; 19
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	99 8b       	std	Y+17, r25	; 0x11
     d22:	88 8b       	std	Y+16, r24	; 0x10
     d24:	7b 8b       	std	Y+19, r23	; 0x13
     d26:	6a 8b       	std	Y+18, r22	; 0x12
	/*if two passwords are matched , strcmp() = 0*/
	if(!strcmp(password,reEnteredPassword))
     d28:	88 89       	ldd	r24, Y+16	; 0x10
     d2a:	99 89       	ldd	r25, Y+17	; 0x11
     d2c:	2a 89       	ldd	r18, Y+18	; 0x12
     d2e:	3b 89       	ldd	r19, Y+19	; 0x13
     d30:	b9 01       	movw	r22, r18
     d32:	0e 94 99 10 	call	0x2132	; 0x2132 <strcmp>
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <checkPassword+0x30>
     d3a:	9d c0       	rjmp	.+314    	; 0xe76 <checkPassword+0x16a>
	{
		/* Set the Passwords correct flag*/
		g_passCorrectFlag=1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 93 7a 00 	sts	0x007A, r24

		/* Write Password in the external EEPROM */
		uint8 i=0;
     d42:	1f 86       	std	Y+15, r1	; 0x0f
		for(i=0;i<=PASSWORD_SIZE;i++)
     d44:	1f 86       	std	Y+15, r1	; 0x0f
     d46:	88 c0       	rjmp	.+272    	; 0xe58 <checkPassword+0x14c>
		{
			/*	Since EEPROM each location inside it has 1 byte,
			 * so next location we increment address by 1 */
			EEPROM_writeByte(0x0311+i, password[i]);
     d48:	8f 85       	ldd	r24, Y+15	; 0x0f
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	8f 5e       	subi	r24, 0xEF	; 239
     d50:	9c 4f       	sbci	r25, 0xFC	; 252
     d52:	ac 01       	movw	r20, r24
     d54:	8f 85       	ldd	r24, Y+15	; 0x0f
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	88 89       	ldd	r24, Y+16	; 0x10
     d5c:	99 89       	ldd	r25, Y+17	; 0x11
     d5e:	fc 01       	movw	r30, r24
     d60:	e2 0f       	add	r30, r18
     d62:	f3 1f       	adc	r31, r19
     d64:	20 81       	ld	r18, Z
     d66:	ca 01       	movw	r24, r20
     d68:	62 2f       	mov	r22, r18
     d6a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <EEPROM_writeByte>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	a0 e2       	ldi	r26, 0x20	; 32
     d74:	b1 e4       	ldi	r27, 0x41	; 65
     d76:	8b 87       	std	Y+11, r24	; 0x0b
     d78:	9c 87       	std	Y+12, r25	; 0x0c
     d7a:	ad 87       	std	Y+13, r26	; 0x0d
     d7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d80:	7c 85       	ldd	r23, Y+12	; 0x0c
     d82:	8d 85       	ldd	r24, Y+13	; 0x0d
     d84:	9e 85       	ldd	r25, Y+14	; 0x0e
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	4a ef       	ldi	r20, 0xFA	; 250
     d8c:	54 e4       	ldi	r21, 0x44	; 68
     d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d92:	dc 01       	movw	r26, r24
     d94:	cb 01       	movw	r24, r22
     d96:	8f 83       	std	Y+7, r24	; 0x07
     d98:	98 87       	std	Y+8, r25	; 0x08
     d9a:	a9 87       	std	Y+9, r26	; 0x09
     d9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d9e:	6f 81       	ldd	r22, Y+7	; 0x07
     da0:	78 85       	ldd	r23, Y+8	; 0x08
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e8       	ldi	r20, 0x80	; 128
     dac:	5f e3       	ldi	r21, 0x3F	; 63
     dae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db2:	88 23       	and	r24, r24
     db4:	2c f4       	brge	.+10     	; 0xdc0 <checkPassword+0xb4>
		__ticks = 1;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	9e 83       	std	Y+6, r25	; 0x06
     dbc:	8d 83       	std	Y+5, r24	; 0x05
     dbe:	3f c0       	rjmp	.+126    	; 0xe3e <checkPassword+0x132>
	else if (__tmp > 65535)
     dc0:	6f 81       	ldd	r22, Y+7	; 0x07
     dc2:	78 85       	ldd	r23, Y+8	; 0x08
     dc4:	89 85       	ldd	r24, Y+9	; 0x09
     dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	3f ef       	ldi	r19, 0xFF	; 255
     dcc:	4f e7       	ldi	r20, 0x7F	; 127
     dce:	57 e4       	ldi	r21, 0x47	; 71
     dd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd4:	18 16       	cp	r1, r24
     dd6:	4c f5       	brge	.+82     	; 0xe2a <checkPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dda:	7c 85       	ldd	r23, Y+12	; 0x0c
     ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dde:	9e 85       	ldd	r25, Y+14	; 0x0e
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <checkPassword+0x114>
     e02:	88 ec       	ldi	r24, 0xC8	; 200
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <checkPassword+0x102>
     e12:	9c 83       	std	Y+4, r25	; 0x04
     e14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	01 97       	sbiw	r24, 0x01	; 1
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e20:	8d 81       	ldd	r24, Y+5	; 0x05
     e22:	9e 81       	ldd	r25, Y+6	; 0x06
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	69 f7       	brne	.-38     	; 0xe02 <checkPassword+0xf6>
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <checkPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2a:	6f 81       	ldd	r22, Y+7	; 0x07
     e2c:	78 85       	ldd	r23, Y+8	; 0x08
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	9a 85       	ldd	r25, Y+10	; 0x0a
     e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	9e 83       	std	Y+6, r25	; 0x06
     e3c:	8d 83       	std	Y+5, r24	; 0x05
     e3e:	8d 81       	ldd	r24, Y+5	; 0x05
     e40:	9e 81       	ldd	r25, Y+6	; 0x06
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <checkPassword+0x13e>
     e4e:	9a 83       	std	Y+2, r25	; 0x02
     e50:	89 83       	std	Y+1, r24	; 0x01
		/* Set the Passwords correct flag*/
		g_passCorrectFlag=1;

		/* Write Password in the external EEPROM */
		uint8 i=0;
		for(i=0;i<=PASSWORD_SIZE;i++)
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	8f 87       	std	Y+15, r24	; 0x0f
     e58:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5a:	86 30       	cpi	r24, 0x06	; 6
     e5c:	08 f4       	brcc	.+2      	; 0xe60 <checkPassword+0x154>
     e5e:	74 cf       	rjmp	.-280    	; 0xd48 <checkPassword+0x3c>
			EEPROM_writeByte(0x0311+i, password[i]);
			/*	Must make 10 ms delay between each write/read operation in EEPROM*/
			_delay_ms(10);
		}
		/*	Send to HMI_ECU that Control_ECU is ready to send	*/
		UART_sendByte(SEND_PASSWORD);
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
		while ( UART_recieveByte() != CONFIRM_SEND_PASSWORD);
     e66:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
     e6a:	82 30       	cpi	r24, 0x02	; 2
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <checkPassword+0x15a>
		/*	Send to HMI_ECU that password is matched */
		UART_sendByte(MATCHED_PASSWORD);
     e6e:	8e ef       	ldi	r24, 0xFE	; 254
     e70:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
     e74:	0c c0       	rjmp	.+24     	; 0xe8e <checkPassword+0x182>
	}
	/*if two passwords are NOT Matched */
	else
	{
		/* Clear the Passwords correct flag*/
		g_passCorrectFlag=0;
     e76:	10 92 7a 00 	sts	0x007A, r1
		/*	Send to HMI_ECU that Control_ECU is ready to send	*/
		UART_sendByte(SEND_PASSWORD);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
		while ( UART_recieveByte() != CONFIRM_SEND_PASSWORD);
     e80:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	e1 f7       	brne	.-8      	; 0xe80 <checkPassword+0x174>
		/*	Send to HMI_ECU that password is NOT Matched */
		UART_sendByte(UNMATCHED_PASSWORD);
     e88:	8d ef       	ldi	r24, 0xFD	; 253
     e8a:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
	}

}
     e8e:	63 96       	adiw	r28, 0x13	; 19
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <checkPasswordInEEPROM>:

/* Function to check if entered password is matched or not matched
 * in the saved password in EEPROM.
 */
void checkPasswordInEEPROM(uint8*password)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	69 97       	sbiw	r28, 0x19	; 25
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	99 8f       	std	Y+25, r25	; 0x19
     eb6:	88 8f       	std	Y+24, r24	; 0x18
	uint8 i=0;
     eb8:	18 8a       	std	Y+16, r1	; 0x10
	/* Make array of unsigned character to store inside it
	 * the password saved in EEPROM.
	 */
	uint8 savedPassword[PASSWORD_SIZE+2];
	/*	Read saved password from EEPROM*/
	for(i=0;i<=PASSWORD_SIZE;i++)
     eba:	18 8a       	std	Y+16, r1	; 0x10
     ebc:	87 c0       	rjmp	.+270    	; 0xfcc <checkPasswordInEEPROM+0x12c>
	{
		/*	Since EEPROM each location inside it has 1 byte,
		 * so next location we increment address by 1*/
		EEPROM_readByte(0x0311+i, &savedPassword[i]);
     ebe:	88 89       	ldd	r24, Y+16	; 0x10
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8f 5e       	subi	r24, 0xEF	; 239
     ec6:	9c 4f       	sbci	r25, 0xFC	; 252
     ec8:	ac 01       	movw	r20, r24
     eca:	88 89       	ldd	r24, Y+16	; 0x10
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9e 01       	movw	r18, r28
     ed2:	2f 5e       	subi	r18, 0xEF	; 239
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	28 0f       	add	r18, r24
     ed8:	39 1f       	adc	r19, r25
     eda:	ca 01       	movw	r24, r20
     edc:	b9 01       	movw	r22, r18
     ede:	0e 94 2d 09 	call	0x125a	; 0x125a <EEPROM_readByte>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e2       	ldi	r26, 0x20	; 32
     ee8:	b1 e4       	ldi	r27, 0x41	; 65
     eea:	8b 87       	std	Y+11, r24	; 0x0b
     eec:	9c 87       	std	Y+12, r25	; 0x0c
     eee:	ad 87       	std	Y+13, r26	; 0x0d
     ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a ef       	ldi	r20, 0xFA	; 250
     f00:	54 e4       	ldi	r21, 0x44	; 68
     f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	8f 83       	std	Y+7, r24	; 0x07
     f0c:	98 87       	std	Y+8, r25	; 0x08
     f0e:	a9 87       	std	Y+9, r26	; 0x09
     f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <checkPasswordInEEPROM+0x94>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <checkPasswordInEEPROM+0x112>
	else if (__tmp > 65535)
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <checkPasswordInEEPROM+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f50:	8d 85       	ldd	r24, Y+13	; 0x0d
     f52:	9e 85       	ldd	r25, Y+14	; 0x0e
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e 83       	std	Y+6, r25	; 0x06
     f72:	8d 83       	std	Y+5, r24	; 0x05
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <checkPasswordInEEPROM+0xf4>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <checkPasswordInEEPROM+0xe2>
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	9e 83       	std	Y+6, r25	; 0x06
     f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <checkPasswordInEEPROM+0xd6>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <checkPasswordInEEPROM+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	6f 81       	ldd	r22, Y+7	; 0x07
     fa0:	78 85       	ldd	r23, Y+8	; 0x08
     fa2:	89 85       	ldd	r24, Y+9	; 0x09
     fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	8d 81       	ldd	r24, Y+5	; 0x05
     fb4:	9e 81       	ldd	r25, Y+6	; 0x06
     fb6:	9a 83       	std	Y+2, r25	; 0x02
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <checkPasswordInEEPROM+0x11e>
     fc2:	9a 83       	std	Y+2, r25	; 0x02
     fc4:	89 83       	std	Y+1, r24	; 0x01
	/* Make array of unsigned character to store inside it
	 * the password saved in EEPROM.
	 */
	uint8 savedPassword[PASSWORD_SIZE+2];
	/*	Read saved password from EEPROM*/
	for(i=0;i<=PASSWORD_SIZE;i++)
     fc6:	88 89       	ldd	r24, Y+16	; 0x10
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	88 8b       	std	Y+16, r24	; 0x10
     fcc:	88 89       	ldd	r24, Y+16	; 0x10
     fce:	86 30       	cpi	r24, 0x06	; 6
     fd0:	08 f4       	brcc	.+2      	; 0xfd4 <checkPasswordInEEPROM+0x134>
     fd2:	75 cf       	rjmp	.-278    	; 0xebe <checkPasswordInEEPROM+0x1e>
		/*	Must make 10 ms delay between each write/read operation in EEPROM*/
		_delay_ms(10);
	}

	/*If password in EEPROM is Matched with password entered by user*/
	if(!strcmp(password,savedPassword))
     fd4:	88 8d       	ldd	r24, Y+24	; 0x18
     fd6:	99 8d       	ldd	r25, Y+25	; 0x19
     fd8:	9e 01       	movw	r18, r28
     fda:	2f 5e       	subi	r18, 0xEF	; 239
     fdc:	3f 4f       	sbci	r19, 0xFF	; 255
     fde:	b9 01       	movw	r22, r18
     fe0:	0e 94 99 10 	call	0x2132	; 0x2132 <strcmp>
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	b9 f5       	brne	.+110    	; 0x1056 <checkPasswordInEEPROM+0x1b6>
	{
		/*	Send to HMI_ECU that Control_ECU is ready to send	*/
		UART_sendByte(SEND_PASSWORD);
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
		while ( UART_recieveByte() != CONFIRM_SEND_PASSWORD);
     fee:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	e1 f7       	brne	.-8      	; 0xfee <checkPasswordInEEPROM+0x14e>
		/*	Send to HMI_ECU that password is matched */
		UART_sendByte(MATCHED_PASSWORD);
     ff6:	8e ef       	ldi	r24, 0xFE	; 254
     ff8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>

		/*	Variable to determine if HMI_ECU wants to open door or change the password*/
		uint8 HMIStatus;
		HMIStatus=UART_recieveByte();
     ffc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
    1000:	8f 87       	std	Y+15, r24	; 0x0f

		/* If HMI_ECU wants to Open Door */
		if(HMIStatus==OPEN_DOOR)
    1002:	8f 85       	ldd	r24, Y+15	; 0x0f
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	f1 f4       	brne	.+60     	; 0x1044 <checkPasswordInEEPROM+0x1a4>
		{
			/* Clear the seconds counter to start counting from beginning*/
			g_secondsCount=0;
    1008:	10 92 7b 00 	sts	0x007B, r1
			/*	Rotate Motor Clockwise at 50 %	*/
			DcMotor_Rotate(Clockwise,50);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	62 e3       	ldi	r22, 0x32	; 50
    1010:	0e 94 c8 08 	call	0x1190	; 0x1190 <DcMotor_Rotate>
			/*	wait till 15 seconds are passed	*/
			while(g_secondsCount<15);
    1014:	80 91 7b 00 	lds	r24, 0x007B
    1018:	8f 30       	cpi	r24, 0x0F	; 15
    101a:	e0 f3       	brcs	.-8      	; 0x1014 <checkPasswordInEEPROM+0x174>
			/* Stop the motor */
			DcMotor_Rotate(Stop,0);
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	0e 94 c8 08 	call	0x1190	; 0x1190 <DcMotor_Rotate>
			/*	wait till another 3 seconds are passed	*/
			while(g_secondsCount<18);
    1024:	80 91 7b 00 	lds	r24, 0x007B
    1028:	82 31       	cpi	r24, 0x12	; 18
    102a:	e0 f3       	brcs	.-8      	; 0x1024 <checkPasswordInEEPROM+0x184>
			/*	Rotate Motor Anti Clockwise at 50 %	*/
			DcMotor_Rotate(Anti_Clockwise,50);
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	62 e3       	ldi	r22, 0x32	; 50
    1030:	0e 94 c8 08 	call	0x1190	; 0x1190 <DcMotor_Rotate>
			/*	wait till another 15 seconds are passed	*/
			while(g_secondsCount<33);
    1034:	80 91 7b 00 	lds	r24, 0x007B
    1038:	81 32       	cpi	r24, 0x21	; 33
    103a:	e0 f3       	brcs	.-8      	; 0x1034 <checkPasswordInEEPROM+0x194>
			/* Stop the motor */
			DcMotor_Rotate(Stop,0);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 c8 08 	call	0x1190	; 0x1190 <DcMotor_Rotate>
		}

		/* If HMI_ECU wants to Change Password */
		if(HMIStatus==CHANGE_PASS)
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	19 f4       	brne	.+6      	; 0x1050 <checkPasswordInEEPROM+0x1b0>
		{
			/*	Set the change password flag */
			g_changePassFlag=1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	80 93 7c 00 	sts	0x007C, r24
		}
		/* Since the two passwords are matched then we
		 * clear consecutive wrong password counter */
		g_consecWrongPass=0;
    1050:	10 92 7d 00 	sts	0x007D, r1
    1054:	11 c0       	rjmp	.+34     	; 0x1078 <checkPasswordInEEPROM+0x1d8>

	/*If password in EEPROM is NOT Matched with password entered by user*/
	else
	{
		/* increment the consecutive wrong password counter */
		g_consecWrongPass++;
    1056:	80 91 7d 00 	lds	r24, 0x007D
    105a:	8f 5f       	subi	r24, 0xFF	; 255
    105c:	80 93 7d 00 	sts	0x007D, r24
		/* clear the correct password flag,since two passwords are NOT matched*/
		g_passCorrectFlag=0;
    1060:	10 92 7a 00 	sts	0x007A, r1
		/*	Send to HMI_ECU that Control_ECU is ready to send	*/
		UART_sendByte(SEND_PASSWORD);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
		while ( UART_recieveByte() != CONFIRM_SEND_PASSWORD);
    106a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	e1 f7       	brne	.-8      	; 0x106a <checkPasswordInEEPROM+0x1ca>
		/*	Send to HMI_ECU that password is matched */
		UART_sendByte(UNMATCHED_PASSWORD);
    1072:	8d ef       	ldi	r24, 0xFD	; 253
    1074:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
	}

}
    1078:	69 96       	adiw	r28, 0x19	; 25
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <PWM_Timer0_Start>:
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */

void PWM_Timer0_Start(uint8 duty_cycle)
{
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; //Set Timer Initial value
    109a:	e2 e5       	ldi	r30, 0x52	; 82
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	10 82       	st	Z, r1

	OCR0  = (uint8)(((uint32)(duty_cycle*MAX_TIMER0_VALUE))/ MAX_DUTY_CYCLE_PERCENTAGE ); // Set Compare Value
    10a0:	0c e5       	ldi	r16, 0x5C	; 92
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	48 2f       	mov	r20, r24
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	ca 01       	movw	r24, r20
    10ac:	9c 01       	movw	r18, r24
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	c9 01       	movw	r24, r18
    10b4:	96 95       	lsr	r25
    10b6:	98 2f       	mov	r25, r24
    10b8:	88 27       	eor	r24, r24
    10ba:	97 95       	ror	r25
    10bc:	87 95       	ror	r24
    10be:	82 1b       	sub	r24, r18
    10c0:	93 0b       	sbc	r25, r19
    10c2:	84 0f       	add	r24, r20
    10c4:	95 1f       	adc	r25, r21
    10c6:	aa 27       	eor	r26, r26
    10c8:	97 fd       	sbrc	r25, 7
    10ca:	a0 95       	com	r26
    10cc:	ba 2f       	mov	r27, r26
    10ce:	24 e6       	ldi	r18, 0x64	; 100
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
    10de:	da 01       	movw	r26, r20
    10e0:	c9 01       	movw	r24, r18
    10e2:	f8 01       	movw	r30, r16
    10e4:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    10e6:	a7 e3       	ldi	r26, 0x37	; 55
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e7 e3       	ldi	r30, 0x37	; 55
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	88 60       	ori	r24, 0x08	; 8
    10f2:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=0 CS01=1 CS00=1
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01)| (1<<CS00);
    10f4:	e3 e5       	ldi	r30, 0x53	; 83
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8b e6       	ldi	r24, 0x6B	; 107
    10fa:	80 83       	st	Z, r24

}
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	08 95       	ret

00001108 <Buzzer_init>:
 * Description :
 * 1. Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * 2. Turn off the buzzer through the GPIO.
 */
void Buzzer_init(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	/*	Setup Pin of buzzer as Output*/
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1110:	83 e0       	ldi	r24, 0x03	; 3
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>

	/*	Initially Turn Off the Buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    111a:	83 e0       	ldi	r24, 0x03	; 3
    111c:	62 e0       	ldi	r22, 0x02	; 2
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <Buzzer_on>:
/*
 * Description :
 * Function to enable the Buzzer through the GPIO
 */
void Buzzer_on(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	/*	Turn On the Buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	62 e0       	ldi	r22, 0x02	; 2
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <Buzzer_off>:
/*
 * Description :
 * Function to disable the Buzzer through the GPIO
 */
void Buzzer_off(void)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	/*	Turn Off the Buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    114a:	83 e0       	ldi	r24, 0x03	; 3
    114c:	62 e0       	ldi	r22, 0x02	; 2
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <DcMotor_Init>:

#include "dc_motor.h"


void DcMotor_Init(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	/* Setting up motor1 o/p pins*/
	GPIO_setupPinDirection(Motor1_PORT_ID, Motor1_INPUT_PIN1, PIN_OUTPUT);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor1_PORT_ID, Motor1_INPUT_PIN2, PIN_OUTPUT);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	0e 94 8d 09 	call	0x131a	; 0x131a <GPIO_setupPinDirection>

	/* Initially Motor is Stopped*/
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN1,Stop);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN2,Stop);
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DcMotor_Rotate>:


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DcMotor_Rotate+0x6>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	6a 83       	std	Y+2, r22	; 0x02
	/* change the state of the motor according to input state given */
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN1,(state&0x01));
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	98 2f       	mov	r25, r24
    11a2:	91 70       	andi	r25, 0x01	; 1
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	49 2f       	mov	r20, r25
    11aa:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>
	GPIO_writePin(Motor1_PORT_ID,Motor1_INPUT_PIN2,((state&0x02)>>1));
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	82 70       	andi	r24, 0x02	; 2
    11b6:	90 70       	andi	r25, 0x00	; 0
    11b8:	95 95       	asr	r25
    11ba:	87 95       	ror	r24
    11bc:	98 2f       	mov	r25, r24
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	49 2f       	mov	r20, r25
    11c4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <GPIO_writePin>

	/* generate duty cycle of speed value (0-->100) to get required motor speed */
	PWM_Timer0_Start(speed);
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	0e 94 45 08 	call	0x108a	; 0x108a <PWM_Timer0_Start>

}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <EEPROM_writeByte+0x6>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <EEPROM_writeByte+0x8>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    11ea:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    11ee:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    11f2:	88 30       	cpi	r24, 0x08	; 8
    11f4:	11 f0       	breq	.+4      	; 0x11fa <EEPROM_writeByte+0x22>
        return ERROR;
    11f6:	1c 82       	std	Y+4, r1	; 0x04
    11f8:	28 c0       	rjmp	.+80     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	80 70       	andi	r24, 0x00	; 0
    1200:	97 70       	andi	r25, 0x07	; 7
    1202:	88 0f       	add	r24, r24
    1204:	89 2f       	mov	r24, r25
    1206:	88 1f       	adc	r24, r24
    1208:	99 0b       	sbc	r25, r25
    120a:	91 95       	neg	r25
    120c:	80 6a       	ori	r24, 0xA0	; 160
    120e:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1212:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    1216:	88 31       	cpi	r24, 0x18	; 24
    1218:	11 f0       	breq	.+4      	; 0x121e <EEPROM_writeByte+0x46>
        return ERROR; 
    121a:	1c 82       	std	Y+4, r1	; 0x04
    121c:	16 c0       	rjmp	.+44     	; 0x124a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1224:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    1228:	88 32       	cpi	r24, 0x28	; 40
    122a:	11 f0       	breq	.+4      	; 0x1230 <EEPROM_writeByte+0x58>
        return ERROR;
    122c:	1c 82       	std	Y+4, r1	; 0x04
    122e:	0d c0       	rjmp	.+26     	; 0x124a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1236:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    123a:	88 32       	cpi	r24, 0x28	; 40
    123c:	11 f0       	breq	.+4      	; 0x1242 <EEPROM_writeByte+0x6a>
        return ERROR;
    123e:	1c 82       	std	Y+4, r1	; 0x04
    1240:	04 c0       	rjmp	.+8      	; 0x124a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1242:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_stop>
	
    return SUCCESS;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	8c 83       	std	Y+4, r24	; 0x04
    124a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	08 95       	ret

0000125a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	00 d0       	rcall	.+0      	; 0x1260 <EEPROM_readByte+0x6>
    1260:	00 d0       	rcall	.+0      	; 0x1262 <EEPROM_readByte+0x8>
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	9a 83       	std	Y+2, r25	; 0x02
    126a:	89 83       	std	Y+1, r24	; 0x01
    126c:	7c 83       	std	Y+4, r23	; 0x04
    126e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1270:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1274:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    1278:	88 30       	cpi	r24, 0x08	; 8
    127a:	11 f0       	breq	.+4      	; 0x1280 <EEPROM_readByte+0x26>
        return ERROR;
    127c:	1d 82       	std	Y+5, r1	; 0x05
    127e:	44 c0       	rjmp	.+136    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	80 70       	andi	r24, 0x00	; 0
    1286:	97 70       	andi	r25, 0x07	; 7
    1288:	88 0f       	add	r24, r24
    128a:	89 2f       	mov	r24, r25
    128c:	88 1f       	adc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	91 95       	neg	r25
    1292:	80 6a       	ori	r24, 0xA0	; 160
    1294:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1298:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    129c:	88 31       	cpi	r24, 0x18	; 24
    129e:	11 f0       	breq	.+4      	; 0x12a4 <EEPROM_readByte+0x4a>
        return ERROR;
    12a0:	1d 82       	std	Y+5, r1	; 0x05
    12a2:	32 c0       	rjmp	.+100    	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12aa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    12ae:	88 32       	cpi	r24, 0x28	; 40
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <EEPROM_readByte+0x5c>
        return ERROR;
    12b2:	1d 82       	std	Y+5, r1	; 0x05
    12b4:	29 c0       	rjmp	.+82     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    12b6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    12ba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    12be:	80 31       	cpi	r24, 0x10	; 16
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <EEPROM_readByte+0x6c>
        return ERROR;
    12c2:	1d 82       	std	Y+5, r1	; 0x05
    12c4:	21 c0       	rjmp	.+66     	; 0x1308 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ca:	80 70       	andi	r24, 0x00	; 0
    12cc:	97 70       	andi	r25, 0x07	; 7
    12ce:	88 0f       	add	r24, r24
    12d0:	89 2f       	mov	r24, r25
    12d2:	88 1f       	adc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	91 95       	neg	r25
    12d8:	81 6a       	ori	r24, 0xA1	; 161
    12da:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    12de:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    12e2:	80 34       	cpi	r24, 0x40	; 64
    12e4:	11 f0       	breq	.+4      	; 0x12ea <EEPROM_readByte+0x90>
        return ERROR;
    12e6:	1d 82       	std	Y+5, r1	; 0x05
    12e8:	0f c0       	rjmp	.+30     	; 0x1308 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    12ea:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <TWI_readByteWithNACK>
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    12f4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <TWI_getStatus>
    12f8:	88 35       	cpi	r24, 0x58	; 88
    12fa:	11 f0       	breq	.+4      	; 0x1300 <EEPROM_readByte+0xa6>
        return ERROR;
    12fc:	1d 82       	std	Y+5, r1	; 0x05
    12fe:	04 c0       	rjmp	.+8      	; 0x1308 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1300:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <TWI_stop>

    return SUCCESS;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	8d 83       	std	Y+5, r24	; 0x05
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
}
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <GPIO_setupPinDirection+0x6>
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_setupPinDirection+0x8>
    1322:	0f 92       	push	r0
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	6a 83       	std	Y+2, r22	; 0x02
    132c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	88 30       	cpi	r24, 0x08	; 8
    1332:	08 f0       	brcs	.+2      	; 0x1336 <GPIO_setupPinDirection+0x1c>
    1334:	d5 c0       	rjmp	.+426    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	08 f0       	brcs	.+2      	; 0x133e <GPIO_setupPinDirection+0x24>
    133c:	d1 c0       	rjmp	.+418    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3d 83       	std	Y+5, r19	; 0x05
    1346:	2c 83       	std	Y+4, r18	; 0x04
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	9d 81       	ldd	r25, Y+5	; 0x05
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <GPIO_setupPinDirection+0x3a>
    1352:	43 c0       	rjmp	.+134    	; 0x13da <GPIO_setupPinDirection+0xc0>
    1354:	2c 81       	ldd	r18, Y+4	; 0x04
    1356:	3d 81       	ldd	r19, Y+5	; 0x05
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <GPIO_setupPinDirection+0x4e>
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	9d 81       	ldd	r25, Y+5	; 0x05
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <GPIO_setupPinDirection+0x68>
    1366:	bc c0       	rjmp	.+376    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_setupPinDirection+0x5a>
    1372:	5f c0       	rjmp	.+190    	; 0x1432 <GPIO_setupPinDirection+0x118>
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	9d 81       	ldd	r25, Y+5	; 0x05
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <GPIO_setupPinDirection+0x66>
    137e:	85 c0       	rjmp	.+266    	; 0x148a <GPIO_setupPinDirection+0x170>
    1380:	af c0       	rjmp	.+350    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1388:	aa e3       	ldi	r26, 0x3A	; 58
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	ea e3       	ldi	r30, 0x3A	; 58
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_setupPinDirection+0x8c>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_setupPinDirection+0x88>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	98 c0       	rjmp	.+304    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13b0:	aa e3       	ldi	r26, 0x3A	; 58
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ea e3       	ldi	r30, 0x3A	; 58
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_setupPinDirection+0xb4>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_setupPinDirection+0xb0>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	83 c0       	rjmp	.+262    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13e0:	a7 e3       	ldi	r26, 0x37	; 55
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e7 e3       	ldi	r30, 0x37	; 55
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_setupPinDirection+0xe4>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_setupPinDirection+0xe0>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	6c c0       	rjmp	.+216    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1408:	a7 e3       	ldi	r26, 0x37	; 55
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e7 e3       	ldi	r30, 0x37	; 55
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_setupPinDirection+0x10c>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_setupPinDirection+0x108>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	57 c0       	rjmp	.+174    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1438:	a4 e3       	ldi	r26, 0x34	; 52
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e4 e3       	ldi	r30, 0x34	; 52
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_setupPinDirection+0x13c>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_setupPinDirection+0x138>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	40 c0       	rjmp	.+128    	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1460:	a4 e3       	ldi	r26, 0x34	; 52
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e4 e3       	ldi	r30, 0x34	; 52
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_setupPinDirection+0x164>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_setupPinDirection+0x160>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	2b c0       	rjmp	.+86     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	a1 f4       	brne	.+40     	; 0x14b8 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1490:	a1 e3       	ldi	r26, 0x31	; 49
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e1 e3       	ldi	r30, 0x31	; 49
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <GPIO_setupPinDirection+0x194>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <GPIO_setupPinDirection+0x190>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	14 c0       	rjmp	.+40     	; 0x14e0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14b8:	a1 e3       	ldi	r26, 0x31	; 49
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e1 e3       	ldi	r30, 0x31	; 49
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <GPIO_setupPinDirection+0x1bc>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <GPIO_setupPinDirection+0x1b8>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_writePin+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_writePin+0x8>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	6a 83       	std	Y+2, r22	; 0x02
    1502:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	88 30       	cpi	r24, 0x08	; 8
    1508:	08 f0       	brcs	.+2      	; 0x150c <GPIO_writePin+0x1c>
    150a:	d5 c0       	rjmp	.+426    	; 0x16b6 <GPIO_writePin+0x1c6>
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	08 f0       	brcs	.+2      	; 0x1514 <GPIO_writePin+0x24>
    1512:	d1 c0       	rjmp	.+418    	; 0x16b6 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	91 05       	cpc	r25, r1
    1526:	09 f4       	brne	.+2      	; 0x152a <GPIO_writePin+0x3a>
    1528:	43 c0       	rjmp	.+134    	; 0x15b0 <GPIO_writePin+0xc0>
    152a:	2c 81       	ldd	r18, Y+4	; 0x04
    152c:	3d 81       	ldd	r19, Y+5	; 0x05
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	2c f4       	brge	.+10     	; 0x153e <GPIO_writePin+0x4e>
    1534:	8c 81       	ldd	r24, Y+4	; 0x04
    1536:	9d 81       	ldd	r25, Y+5	; 0x05
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	71 f0       	breq	.+28     	; 0x1558 <GPIO_writePin+0x68>
    153c:	bc c0       	rjmp	.+376    	; 0x16b6 <GPIO_writePin+0x1c6>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	09 f4       	brne	.+2      	; 0x154a <GPIO_writePin+0x5a>
    1548:	5f c0       	rjmp	.+190    	; 0x1608 <GPIO_writePin+0x118>
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	9d 81       	ldd	r25, Y+5	; 0x05
    154e:	83 30       	cpi	r24, 0x03	; 3
    1550:	91 05       	cpc	r25, r1
    1552:	09 f4       	brne	.+2      	; 0x1556 <GPIO_writePin+0x66>
    1554:	85 c0       	rjmp	.+266    	; 0x1660 <GPIO_writePin+0x170>
    1556:	af c0       	rjmp	.+350    	; 0x16b6 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    155e:	ab e3       	ldi	r26, 0x3B	; 59
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	eb e3       	ldi	r30, 0x3B	; 59
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_writePin+0x8c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_writePin+0x88>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	98 c0       	rjmp	.+304    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1586:	ab e3       	ldi	r26, 0x3B	; 59
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_writePin+0xb4>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_writePin+0xb0>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	83 c0       	rjmp	.+262    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15b6:	a8 e3       	ldi	r26, 0x38	; 56
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e8 e3       	ldi	r30, 0x38	; 56
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_writePin+0xe4>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_writePin+0xe0>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	6c c0       	rjmp	.+216    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15de:	a8 e3       	ldi	r26, 0x38	; 56
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e8 e3       	ldi	r30, 0x38	; 56
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_writePin+0x10c>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_writePin+0x108>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	a1 f4       	brne	.+40     	; 0x1636 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    160e:	a5 e3       	ldi	r26, 0x35	; 53
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e3       	ldi	r30, 0x35	; 53
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_writePin+0x13c>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_writePin+0x138>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	40 c0       	rjmp	.+128    	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_writePin+0x164>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_writePin+0x160>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	2b c0       	rjmp	.+86     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a1 f4       	brne	.+40     	; 0x168e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1666:	a2 e3       	ldi	r26, 0x32	; 50
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e2 e3       	ldi	r30, 0x32	; 50
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GPIO_writePin+0x194>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GPIO_writePin+0x190>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	14 c0       	rjmp	.+40     	; 0x16b6 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    168e:	a2 e3       	ldi	r26, 0x32	; 50
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e2 e3       	ldi	r30, 0x32	; 50
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <GPIO_writePin+0x1bc>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <GPIO_writePin+0x1b8>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <GPIO_readPin+0x6>
    16cc:	00 d0       	rcall	.+0      	; 0x16ce <GPIO_readPin+0x8>
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	8a 83       	std	Y+2, r24	; 0x02
    16d6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16d8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	88 30       	cpi	r24, 0x08	; 8
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <GPIO_readPin+0x1c>
    16e0:	84 c0       	rjmp	.+264    	; 0x17ea <GPIO_readPin+0x124>
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_readPin+0x24>
    16e8:	80 c0       	rjmp	.+256    	; 0x17ea <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3d 83       	std	Y+5, r19	; 0x05
    16f2:	2c 83       	std	Y+4, r18	; 0x04
    16f4:	4c 81       	ldd	r20, Y+4	; 0x04
    16f6:	5d 81       	ldd	r21, Y+5	; 0x05
    16f8:	41 30       	cpi	r20, 0x01	; 1
    16fa:	51 05       	cpc	r21, r1
    16fc:	79 f1       	breq	.+94     	; 0x175c <GPIO_readPin+0x96>
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1700:	9d 81       	ldd	r25, Y+5	; 0x05
    1702:	82 30       	cpi	r24, 0x02	; 2
    1704:	91 05       	cpc	r25, r1
    1706:	34 f4       	brge	.+12     	; 0x1714 <GPIO_readPin+0x4e>
    1708:	2c 81       	ldd	r18, Y+4	; 0x04
    170a:	3d 81       	ldd	r19, Y+5	; 0x05
    170c:	21 15       	cp	r18, r1
    170e:	31 05       	cpc	r19, r1
    1710:	69 f0       	breq	.+26     	; 0x172c <GPIO_readPin+0x66>
    1712:	6b c0       	rjmp	.+214    	; 0x17ea <GPIO_readPin+0x124>
    1714:	4c 81       	ldd	r20, Y+4	; 0x04
    1716:	5d 81       	ldd	r21, Y+5	; 0x05
    1718:	42 30       	cpi	r20, 0x02	; 2
    171a:	51 05       	cpc	r21, r1
    171c:	b9 f1       	breq	.+110    	; 0x178c <GPIO_readPin+0xc6>
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	83 30       	cpi	r24, 0x03	; 3
    1724:	91 05       	cpc	r25, r1
    1726:	09 f4       	brne	.+2      	; 0x172a <GPIO_readPin+0x64>
    1728:	49 c0       	rjmp	.+146    	; 0x17bc <GPIO_readPin+0xf6>
    172a:	5f c0       	rjmp	.+190    	; 0x17ea <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    172c:	e9 e3       	ldi	r30, 0x39	; 57
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	88 2f       	mov	r24, r24
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_readPin+0x7e>
    1740:	55 95       	asr	r21
    1742:	47 95       	ror	r20
    1744:	8a 95       	dec	r24
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_readPin+0x7a>
    1748:	ca 01       	movw	r24, r20
    174a:	81 70       	andi	r24, 0x01	; 1
    174c:	90 70       	andi	r25, 0x00	; 0
    174e:	88 23       	and	r24, r24
    1750:	19 f0       	breq	.+6      	; 0x1758 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	49 c0       	rjmp	.+146    	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1758:	19 82       	std	Y+1, r1	; 0x01
    175a:	47 c0       	rjmp	.+142    	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    175c:	e6 e3       	ldi	r30, 0x36	; 54
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_readPin+0xae>
    1770:	55 95       	asr	r21
    1772:	47 95       	ror	r20
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_readPin+0xaa>
    1778:	ca 01       	movw	r24, r20
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	90 70       	andi	r25, 0x00	; 0
    177e:	88 23       	and	r24, r24
    1780:	19 f0       	breq	.+6      	; 0x1788 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	31 c0       	rjmp	.+98     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1788:	19 82       	std	Y+1, r1	; 0x01
    178a:	2f c0       	rjmp	.+94     	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    178c:	e3 e3       	ldi	r30, 0x33	; 51
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a9 01       	movw	r20, r18
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <GPIO_readPin+0xde>
    17a0:	55 95       	asr	r21
    17a2:	47 95       	ror	r20
    17a4:	8a 95       	dec	r24
    17a6:	e2 f7       	brpl	.-8      	; 0x17a0 <GPIO_readPin+0xda>
    17a8:	ca 01       	movw	r24, r20
    17aa:	81 70       	andi	r24, 0x01	; 1
    17ac:	90 70       	andi	r25, 0x00	; 0
    17ae:	88 23       	and	r24, r24
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	19 c0       	rjmp	.+50     	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17b8:	19 82       	std	Y+1, r1	; 0x01
    17ba:	17 c0       	rjmp	.+46     	; 0x17ea <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17bc:	e0 e3       	ldi	r30, 0x30	; 48
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <GPIO_readPin+0x10e>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <GPIO_readPin+0x10a>
    17d8:	ca 01       	movw	r24, r20
    17da:	81 70       	andi	r24, 0x01	; 1
    17dc:	90 70       	andi	r25, 0x00	; 0
    17de:	88 23       	and	r24, r24
    17e0:	19 f0       	breq	.+6      	; 0x17e8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	89 83       	std	Y+1, r24	; 0x01
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17e8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_setupPortDirection+0x6>
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPortDirection+0x8>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	90 f5       	brcc	.+100    	; 0x1876 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	3c 83       	std	Y+4, r19	; 0x04
    181a:	2b 83       	std	Y+3, r18	; 0x03
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	91 05       	cpc	r25, r1
    1824:	d1 f0       	breq	.+52     	; 0x185a <GPIO_setupPortDirection+0x5e>
    1826:	2b 81       	ldd	r18, Y+3	; 0x03
    1828:	3c 81       	ldd	r19, Y+4	; 0x04
    182a:	22 30       	cpi	r18, 0x02	; 2
    182c:	31 05       	cpc	r19, r1
    182e:	2c f4       	brge	.+10     	; 0x183a <GPIO_setupPortDirection+0x3e>
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	61 f0       	breq	.+24     	; 0x1850 <GPIO_setupPortDirection+0x54>
    1838:	1e c0       	rjmp	.+60     	; 0x1876 <GPIO_setupPortDirection+0x7a>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	81 f0       	breq	.+32     	; 0x1864 <GPIO_setupPortDirection+0x68>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	83 30       	cpi	r24, 0x03	; 3
    184a:	91 05       	cpc	r25, r1
    184c:	81 f0       	breq	.+32     	; 0x186e <GPIO_setupPortDirection+0x72>
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1850:	ea e3       	ldi	r30, 0x3A	; 58
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	80 83       	st	Z, r24
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    185a:	e7 e3       	ldi	r30, 0x37	; 55
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	80 83       	st	Z, r24
    1862:	09 c0       	rjmp	.+18     	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1864:	e4 e3       	ldi	r30, 0x34	; 52
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    186e:	e1 e3       	ldi	r30, 0x31	; 49
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
			break;
		}
	}
}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	00 d0       	rcall	.+0      	; 0x188a <GPIO_writePort+0x6>
    188a:	00 d0       	rcall	.+0      	; 0x188c <GPIO_writePort+0x8>
    188c:	cd b7       	in	r28, 0x3d	; 61
    188e:	de b7       	in	r29, 0x3e	; 62
    1890:	89 83       	std	Y+1, r24	; 0x01
    1892:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	84 30       	cpi	r24, 0x04	; 4
    1898:	90 f5       	brcc	.+100    	; 0x18fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	3c 83       	std	Y+4, r19	; 0x04
    18a2:	2b 83       	std	Y+3, r18	; 0x03
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <GPIO_writePort+0x5e>
    18ae:	2b 81       	ldd	r18, Y+3	; 0x03
    18b0:	3c 81       	ldd	r19, Y+4	; 0x04
    18b2:	22 30       	cpi	r18, 0x02	; 2
    18b4:	31 05       	cpc	r19, r1
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <GPIO_writePort+0x3e>
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	61 f0       	breq	.+24     	; 0x18d8 <GPIO_writePort+0x54>
    18c0:	1e c0       	rjmp	.+60     	; 0x18fe <GPIO_writePort+0x7a>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	81 f0       	breq	.+32     	; 0x18ec <GPIO_writePort+0x68>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <GPIO_writePort+0x72>
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18d8:	eb e3       	ldi	r30, 0x3B	; 59
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	80 83       	st	Z, r24
    18e0:	0e c0       	rjmp	.+28     	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18e2:	e8 e3       	ldi	r30, 0x38	; 56
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18ec:	e5 e3       	ldi	r30, 0x35	; 53
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	04 c0       	rjmp	.+8      	; 0x18fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18f6:	e2 e3       	ldi	r30, 0x32	; 50
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <GPIO_readPort+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <GPIO_readPort+0x8>
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    191a:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	84 30       	cpi	r24, 0x04	; 4
    1920:	90 f5       	brcc	.+100    	; 0x1986 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3c 83       	std	Y+4, r19	; 0x04
    192a:	2b 83       	std	Y+3, r18	; 0x03
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	9c 81       	ldd	r25, Y+4	; 0x04
    1930:	81 30       	cpi	r24, 0x01	; 1
    1932:	91 05       	cpc	r25, r1
    1934:	d1 f0       	breq	.+52     	; 0x196a <GPIO_readPort+0x5e>
    1936:	2b 81       	ldd	r18, Y+3	; 0x03
    1938:	3c 81       	ldd	r19, Y+4	; 0x04
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	31 05       	cpc	r19, r1
    193e:	2c f4       	brge	.+10     	; 0x194a <GPIO_readPort+0x3e>
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 f0       	breq	.+24     	; 0x1960 <GPIO_readPort+0x54>
    1948:	1e c0       	rjmp	.+60     	; 0x1986 <GPIO_readPort+0x7a>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	81 f0       	breq	.+32     	; 0x1974 <GPIO_readPort+0x68>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	81 f0       	breq	.+32     	; 0x197e <GPIO_readPort+0x72>
    195e:	13 c0       	rjmp	.+38     	; 0x1986 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1960:	e9 e3       	ldi	r30, 0x39	; 57
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	0e c0       	rjmp	.+28     	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    196a:	e6 e3       	ldi	r30, 0x36	; 54
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1974:	e3 e3       	ldi	r30, 0x33	; 51
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	04 c0       	rjmp	.+8      	; 0x1986 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    197e:	e0 e3       	ldi	r30, 0x30	; 48
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <Timer1_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer1_init(const Timer1_ConfigType * TIMER1_Config)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <Timer1_init+0x6>
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01

	/* FOC1A,FOC1B  : are only active when specifying non-pwm mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    19a4:	ef e4       	ldi	r30, 0x4F	; 79
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	8c e0       	ldi	r24, 0x0C	; 12
    19aa:	80 83       	st	Z, r24
	/* Select the modes WGM11,WGM10 , {Normal Mode or Compare Mode} */
	TCCR1A = (TCCR1A & 0xFC) | ((TIMER1_Config->mode)&0x03);
    19ac:	af e4       	ldi	r26, 0x4F	; 79
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	ef e4       	ldi	r30, 0x4F	; 79
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	98 2f       	mov	r25, r24
    19b8:	9c 7f       	andi	r25, 0xFC	; 252
    19ba:	e9 81       	ldd	r30, Y+1	; 0x01
    19bc:	fa 81       	ldd	r31, Y+2	; 0x02
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	83 70       	andi	r24, 0x03	; 3
    19c2:	89 2b       	or	r24, r25
    19c4:	8c 93       	st	X, r24
	/* configure WGM13, WGM12 */
	TCCR1B = (TCCR1B & 0xE7) | (((TIMER1_Config->mode) & 0x0C)<<1);
    19c6:	ae e4       	ldi	r26, 0x4E	; 78
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ee e4       	ldi	r30, 0x4E	; 78
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	28 2f       	mov	r18, r24
    19d2:	27 7e       	andi	r18, 0xE7	; 231
    19d4:	e9 81       	ldd	r30, Y+1	; 0x01
    19d6:	fa 81       	ldd	r31, Y+2	; 0x02
    19d8:	82 81       	ldd	r24, Z+2	; 0x02
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	8c 70       	andi	r24, 0x0C	; 12
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	82 2b       	or	r24, r18
    19e8:	8c 93       	st	X, r24

	/* Configure prescaler , CS12, CS11, CS10*/
	TCCR1B = (TCCR1B & 0xF8) | ((TIMER1_Config->prescaler)&0x07);
    19ea:	ae e4       	ldi	r26, 0x4E	; 78
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	ee e4       	ldi	r30, 0x4E	; 78
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	98 2f       	mov	r25, r24
    19f6:	98 7f       	andi	r25, 0xF8	; 248
    19f8:	e9 81       	ldd	r30, Y+1	; 0x01
    19fa:	fa 81       	ldd	r31, Y+2	; 0x02
    19fc:	83 81       	ldd	r24, Z+3	; 0x03
    19fe:	87 70       	andi	r24, 0x07	; 7
    1a00:	89 2b       	or	r24, r25
    1a02:	8c 93       	st	X, r24

	/* Value of Timer initially */
	TCNT1 = TIMER1_Config->initial_value;
    1a04:	ac e4       	ldi	r26, 0x4C	; 76
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	80 81       	ld	r24, Z
    1a0e:	91 81       	ldd	r25, Z+1	; 0x01
    1a10:	11 96       	adiw	r26, 0x01	; 1
    1a12:	9c 93       	st	X, r25
    1a14:	8e 93       	st	-X, r24

	if(TIMER1_Config->mode == CTC_MODE)
    1a16:	e9 81       	ldd	r30, Y+1	; 0x01
    1a18:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	84 30       	cpi	r24, 0x04	; 4
    1a1e:	71 f4       	brne	.+28     	; 0x1a3c <Timer1_init+0xa6>
	{
		/* Compare value is put in OCR1A register*/
		OCR1A = TIMER1_Config->compare_value;
    1a20:	aa e4       	ldi	r26, 0x4A	; 74
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e9 81       	ldd	r30, Y+1	; 0x01
    1a26:	fa 81       	ldd	r31, Y+2	; 0x02
    1a28:	84 81       	ldd	r24, Z+4	; 0x04
    1a2a:	95 81       	ldd	r25, Z+5	; 0x05
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	9c 93       	st	X, r25
    1a30:	8e 93       	st	-X, r24

		/* Enable the Output Compare A Match Interrupt Enable */
		TIMSK = (1<<OCIE1A);
    1a32:	e9 e5       	ldi	r30, 0x59	; 89
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 e1       	ldi	r24, 0x10	; 16
    1a38:	80 83       	st	Z, r24
    1a3a:	09 c0       	rjmp	.+18     	; 0x1a4e <Timer1_init+0xb8>
	}
	else if (TIMER1_Config->mode == NORMAL_MODE)
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	82 81       	ldd	r24, Z+2	; 0x02
    1a42:	88 23       	and	r24, r24
    1a44:	21 f4       	brne	.+8      	; 0x1a4e <Timer1_init+0xb8>
	{
		/* Enable the Output Compare A Match Interrupt Enable */
		TIMSK = (1<<TOIE1);
    1a46:	e9 e5       	ldi	r30, 0x59	; 89
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	84 e0       	ldi	r24, 0x04	; 4
    1a4c:	80 83       	st	Z, r24
	}
}
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <Timer1_deInit>:
/*
 * Description :
 * Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
	/* deInit the Whole Timer1*/
	TCCR1A = 0;
    1a60:	ef e4       	ldi	r30, 0x4F	; 79
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	10 82       	st	Z, r1
	TCNT1 = 0;
    1a66:	ec e4       	ldi	r30, 0x4C	; 76
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	11 82       	std	Z+1, r1	; 0x01
    1a6c:	10 82       	st	Z, r1
	OCR1A = 0;
    1a6e:	ea e4       	ldi	r30, 0x4A	; 74
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	11 82       	std	Z+1, r1	; 0x01
    1a74:	10 82       	st	Z, r1
	TIMSK = 0;
    1a76:	e9 e5       	ldi	r30, 0x59	; 89
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	10 82       	st	Z, r1
}
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <Timer1_setCallBack+0x6>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	9a 81       	ldd	r25, Y+2	; 0x02
    1a94:	90 93 7f 00 	sts	0x007F, r25
    1a98:	80 93 7e 00 	sts	0x007E, r24
}
    1a9c:	0f 90       	pop	r0
    1a9e:	0f 90       	pop	r0
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <__vector_9>:
/*******************************************************************************
 *                      		ISRs 		                                   *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1ad0:	80 91 7e 00 	lds	r24, 0x007E
    1ad4:	90 91 7f 00 	lds	r25, 0x007F
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	29 f0       	breq	.+10     	; 0x1ae6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1adc:	e0 91 7e 00 	lds	r30, 0x007E
    1ae0:	f0 91 7f 00 	lds	r31, 0x007F
    1ae4:	09 95       	icall
	}
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	0f 90       	pop	r0
    1b08:	1f 90       	pop	r1
    1b0a:	18 95       	reti

00001b0c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b36:	80 91 7e 00 	lds	r24, 0x007E
    1b3a:	90 91 7f 00 	lds	r25, 0x007F
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	29 f0       	breq	.+10     	; 0x1b4c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b42:	e0 91 7e 00 	lds	r30, 0x007E
    1b46:	f0 91 7f 00 	lds	r31, 0x007F
    1b4a:	09 95       	icall
	}

}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <TWI_init>:
#include <avr/io.h>



void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <TWI_init+0x6>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <TWI_init+0x8>
    1b7a:	0f 92       	push	r0
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	9d 83       	std	Y+5, r25	; 0x05
    1b82:	8c 83       	std	Y+4, r24	; 0x04
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint8 Prescaler;
	sint8 Twbr_value=0;
    1b84:	1a 82       	std	Y+2, r1	; 0x02
	uint8 four_pow_prescaler=1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01
	for(Prescaler=0;Prescaler<4;Prescaler++)
    1b8a:	1b 82       	std	Y+3, r1	; 0x03
    1b8c:	40 c0       	rjmp	.+128    	; 0x1c0e <TWI_init+0x9c>
	{
		Twbr_value = F_CPU/((Config_Ptr->bit_rate)*2*four_pow_prescaler)  - 16/(2*four_pow_prescaler);
    1b8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b90:	fd 81       	ldd	r31, Y+5	; 0x05
    1b92:	80 81       	ld	r24, Z
    1b94:	91 81       	ldd	r25, Z+1	; 0x01
    1b96:	a2 81       	ldd	r26, Z+2	; 0x02
    1b98:	b3 81       	ldd	r27, Z+3	; 0x03
    1b9a:	29 81       	ldd	r18, Y+1	; 0x01
    1b9c:	22 2f       	mov	r18, r18
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <__mulsi3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	ad 01       	movw	r20, r26
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	44 1f       	adc	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	92 e1       	ldi	r25, 0x12	; 18
    1bc0:	aa e7       	ldi	r26, 0x7A	; 122
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	bc 01       	movw	r22, r24
    1bc6:	cd 01       	movw	r24, r26
    1bc8:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
    1bcc:	da 01       	movw	r26, r20
    1bce:	c9 01       	movw	r24, r18
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9c 01       	movw	r18, r24
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	80 e1       	ldi	r24, 0x10	; 16
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	b9 01       	movw	r22, r18
    1be4:	0e 94 19 10 	call	0x2032	; 0x2032 <__divmodhi4>
    1be8:	cb 01       	movw	r24, r22
    1bea:	94 2f       	mov	r25, r20
    1bec:	98 1b       	sub	r25, r24
    1bee:	89 2f       	mov	r24, r25
    1bf0:	8a 83       	std	Y+2, r24	; 0x02

		if(Twbr_value>0)	// if positive number, break and put that value in TWBR register
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	18 16       	cp	r1, r24
    1bf6:	7c f0       	brlt	.+30     	; 0x1c16 <TWI_init+0xa4>
			break;

		four_pow_prescaler *= 4;
    1bf8:	89 81       	ldd	r24, Y+1	; 0x01
    1bfa:	88 2f       	mov	r24, r24
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	89 83       	std	Y+1, r24	; 0x01
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	uint8 Prescaler;
	sint8 Twbr_value=0;
	uint8 four_pow_prescaler=1;
	for(Prescaler=0;Prescaler<4;Prescaler++)
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	8b 83       	std	Y+3, r24	; 0x03
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	84 30       	cpi	r24, 0x04	; 4
    1c12:	08 f4       	brcc	.+2      	; 0x1c16 <TWI_init+0xa4>
    1c14:	bc cf       	rjmp	.-136    	; 0x1b8e <TWI_init+0x1c>
			break;

		four_pow_prescaler *= 4;
	}

    TWBR = Twbr_value;
    1c16:	e0 e2       	ldi	r30, 0x20	; 32
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	80 83       	st	Z, r24
	TWSR = Prescaler;
    1c1e:	e1 e2       	ldi	r30, 0x21	; 33
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	80 83       	st	Z, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
  //  TWAR = 0b00000010; // my address = 0x01 :)

	TWAR = (Config_Ptr->address)<<1 ;
    1c26:	a2 e2       	ldi	r26, 0x22	; 34
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2c:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2e:	84 81       	ldd	r24, Z+4	; 0x04
    1c30:	88 0f       	add	r24, r24
    1c32:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1c34:	e6 e5       	ldi	r30, 0x56	; 86
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	84 e0       	ldi	r24, 0x04	; 4
    1c3a:	80 83       	st	Z, r24
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <TWI_start>:

void TWI_start(void)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1c54:	e6 e5       	ldi	r30, 0x56	; 86
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	84 ea       	ldi	r24, 0xA4	; 164
    1c5a:	80 83       	st	Z, r24
    /*	Note, we did here 1<<TWEN since we makdeTWCR= ,  why not =|
     * -> because every time we need to reset flags of TWCR registers
     */
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c5c:	e6 e5       	ldi	r30, 0x56	; 86
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	88 23       	and	r24, r24
    1c64:	dc f7       	brge	.-10     	; 0x1c5c <TWI_start+0x10>
}
    1c66:	cf 91       	pop	r28
    1c68:	df 91       	pop	r29
    1c6a:	08 95       	ret

00001c6c <TWI_stop>:

void TWI_stop(void)
{
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1c74:	e6 e5       	ldi	r30, 0x56	; 86
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	84 e9       	ldi	r24, 0x94	; 148
    1c7a:	80 83       	st	Z, r24
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1c8e:	e3 e2       	ldi	r30, 0x23	; 35
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c96:	e6 e5       	ldi	r30, 0x56	; 86
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	84 e8       	ldi	r24, 0x84	; 132
    1c9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c9e:	e6 e5       	ldi	r30, 0x56	; 86
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	88 23       	and	r24, r24
    1ca6:	dc f7       	brge	.-10     	; 0x1c9e <TWI_writeByte+0x1c>
}
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1cb8:	e6 e5       	ldi	r30, 0x56	; 86
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	84 ec       	ldi	r24, 0xC4	; 196
    1cbe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cc0:	e6 e5       	ldi	r30, 0x56	; 86
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	88 23       	and	r24, r24
    1cc8:	dc f7       	brge	.-10     	; 0x1cc0 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1cca:	e3 e2       	ldi	r30, 0x23	; 35
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
}
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1cde:	e6 e5       	ldi	r30, 0x56	; 86
    1ce0:	f0 e0       	ldi	r31, 0x00	; 0
    1ce2:	84 e8       	ldi	r24, 0x84	; 132
    1ce4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1ce6:	e6 e5       	ldi	r30, 0x56	; 86
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	88 23       	and	r24, r24
    1cee:	dc f7       	brge	.-10     	; 0x1ce6 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1cf0:	e3 e2       	ldi	r30, 0x23	; 35
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1d06:	e1 e2       	ldi	r30, 0x21	; 33
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 7f       	andi	r24, 0xF8	; 248
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <UART_init+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <UART_init+0x8>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1d2a:	1a 82       	std	Y+2, r1	; 0x02
    1d2c:	19 82       	std	Y+1, r1	; 0x01
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 5,6,7,8-bit data mode
	 * RXB8 & TXB8 not used for 5,6,7,8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1d2e:	ea e2       	ldi	r30, 0x2A	; 42
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	88 e1       	ldi	r24, 0x18	; 24
    1d34:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = For 5,6,7,8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | ( ((Config_Ptr->bit_data)<<1) & 0x06 )  ;
    1d36:	a0 e4       	ldi	r26, 0x40	; 64
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3e:	81 81       	ldd	r24, Z+1	; 0x01
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	86 70       	andi	r24, 0x06	; 6
    1d4a:	80 68       	ori	r24, 0x80	; 128
    1d4c:	8c 93       	st	X, r24
	/* Set Parity and Number of Stop Bits*/
	UCSRC |= (((Config_Ptr->parity)<<4) & 0x30 ) | (((Config_Ptr->stop_bit)<<3) & 0x08 );
    1d4e:	a0 e4       	ldi	r26, 0x40	; 64
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e0 e4       	ldi	r30, 0x40	; 64
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	38 2f       	mov	r19, r24
    1d5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	82 95       	swap	r24
    1d66:	92 95       	swap	r25
    1d68:	90 7f       	andi	r25, 0xF0	; 240
    1d6a:	98 27       	eor	r25, r24
    1d6c:	80 7f       	andi	r24, 0xF0	; 240
    1d6e:	98 27       	eor	r25, r24
    1d70:	28 2f       	mov	r18, r24
    1d72:	20 73       	andi	r18, 0x30	; 48
    1d74:	eb 81       	ldd	r30, Y+3	; 0x03
    1d76:	fc 81       	ldd	r31, Y+4	; 0x04
    1d78:	83 81       	ldd	r24, Z+3	; 0x03
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	88 70       	andi	r24, 0x08	; 8
    1d8c:	82 2b       	or	r24, r18
    1d8e:	83 2b       	or	r24, r19
    1d90:	8c 93       	st	X, r24


	/* Asynchronous Double Speed Mode */
	if(Config_Ptr->Mode == Asynchronous_Double_Speed_Mode)
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	80 81       	ld	r24, Z
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	71 f5       	brne	.+92     	; 0x1df8 <UART_init+0xde>
	{
		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    1d9c:	eb e2       	ldi	r30, 0x2B	; 43
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	82 e0       	ldi	r24, 0x02	; 2
    1da2:	80 83       	st	Z, r24


		UCSRC &= ~(1<<UMSEL);		/* Asynchronous Operation, UMSEL =	0 */
    1da4:	a0 e4       	ldi	r26, 0x40	; 64
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e0 e4       	ldi	r30, 0x40	; 64
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 7b       	andi	r24, 0xBF	; 191
    1db0:	8c 93       	st	X, r24


		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    1db2:	eb 81       	ldd	r30, Y+3	; 0x03
    1db4:	fc 81       	ldd	r31, Y+4	; 0x04
    1db6:	84 81       	ldd	r24, Z+4	; 0x04
    1db8:	95 81       	ldd	r25, Z+5	; 0x05
    1dba:	cc 01       	movw	r24, r24
    1dbc:	a0 e0       	ldi	r26, 0x00	; 0
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	aa 1f       	adc	r26, r26
    1dc6:	bb 1f       	adc	r27, r27
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	aa 1f       	adc	r26, r26
    1dd6:	bb 1f       	adc	r27, r27
    1dd8:	9c 01       	movw	r18, r24
    1dda:	ad 01       	movw	r20, r26
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	92 e1       	ldi	r25, 0x12	; 18
    1de0:	aa e7       	ldi	r26, 0x7A	; 122
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
    1dec:	da 01       	movw	r26, r20
    1dee:	c9 01       	movw	r24, r18
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	5a c0       	rjmp	.+180    	; 0x1eac <UART_init+0x192>
	}

	/* Synchronous Mode */
	else if((Config_Ptr->Mode == Synchronous_Mode))
    1df8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	41 f5       	brne	.+80     	; 0x1e52 <UART_init+0x138>
	{
		UCSRC |= (1<<UMSEL);		/* Synchronous Operation	*/
    1e02:	a0 e4       	ldi	r26, 0x40	; 64
    1e04:	b0 e0       	ldi	r27, 0x00	; 0
    1e06:	e0 e4       	ldi	r30, 0x40	; 64
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	80 64       	ori	r24, 0x40	; 64
    1e0e:	8c 93       	st	X, r24

		/* UCPOL : Bit 0
		 * UCPOL = 0 -> TX Rising XCK edge ,RX Falling XCK edge
		 * UCPOL = 1 -> TX Falling XCK edge ,RX Rising XCK edge
		 * */
		UCSRC |= SYNC_TX_XCK_EGGE;
    1e10:	a0 e4       	ldi	r26, 0x40	; 64
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e0 e4       	ldi	r30, 0x40	; 64
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8c 93       	st	X, r24

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 2UL))) - 1);
    1e1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e20:	84 81       	ldd	r24, Z+4	; 0x04
    1e22:	95 81       	ldd	r25, Z+5	; 0x05
    1e24:	cc 01       	movw	r24, r24
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	ad 01       	movw	r20, r26
    1e2e:	22 0f       	add	r18, r18
    1e30:	33 1f       	adc	r19, r19
    1e32:	44 1f       	adc	r20, r20
    1e34:	55 1f       	adc	r21, r21
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	92 e1       	ldi	r25, 0x12	; 18
    1e3a:	aa e7       	ldi	r26, 0x7A	; 122
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
    1e46:	da 01       	movw	r26, r20
    1e48:	c9 01       	movw	r24, r18
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	9a 83       	std	Y+2, r25	; 0x02
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	2d c0       	rjmp	.+90     	; 0x1eac <UART_init+0x192>
	}

	/*	Asynchronous Normal Mode */
	else
	{
		UCSRC &= ~(1<<UMSEL);		/* Asynchronous Operation, UMSEL =	0 */
    1e52:	a0 e4       	ldi	r26, 0x40	; 64
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e0 e4       	ldi	r30, 0x40	; 64
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8f 7b       	andi	r24, 0xBF	; 191
    1e5e:	8c 93       	st	X, r24

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 16UL))) - 1);
    1e60:	eb 81       	ldd	r30, Y+3	; 0x03
    1e62:	fc 81       	ldd	r31, Y+4	; 0x04
    1e64:	84 81       	ldd	r24, Z+4	; 0x04
    1e66:	95 81       	ldd	r25, Z+5	; 0x05
    1e68:	cc 01       	movw	r24, r24
    1e6a:	a0 e0       	ldi	r26, 0x00	; 0
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	aa 1f       	adc	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	aa 1f       	adc	r26, r26
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	aa 1f       	adc	r26, r26
    1e84:	bb 1f       	adc	r27, r27
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	aa 1f       	adc	r26, r26
    1e8c:	bb 1f       	adc	r27, r27
    1e8e:	9c 01       	movw	r18, r24
    1e90:	ad 01       	movw	r20, r26
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	92 e1       	ldi	r25, 0x12	; 18
    1e96:	aa e7       	ldi	r26, 0x7A	; 122
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
    1ea2:	da 01       	movw	r26, r20
    1ea4:	c9 01       	movw	r24, r18
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	9a 83       	std	Y+2, r25	; 0x02
    1eaa:	89 83       	std	Y+1, r24	; 0x01
	}



	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1eac:	e0 e4       	ldi	r30, 0x40	; 64
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	89 2f       	mov	r24, r25
    1eb6:	99 27       	eor	r25, r25
    1eb8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1eba:	e9 e2       	ldi	r30, 0x29	; 41
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	80 83       	st	Z, r24
}
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	0f 92       	push	r0
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1edc:	eb e2       	ldi	r30, 0x2B	; 43
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	88 2f       	mov	r24, r24
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	80 72       	andi	r24, 0x20	; 32
    1ee8:	90 70       	andi	r25, 0x00	; 0
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	b9 f3       	breq	.-18     	; 0x1edc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1eee:	ec e2       	ldi	r30, 0x2C	; 44
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1f06:	eb e2       	ldi	r30, 0x2B	; 43
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 23       	and	r24, r24
    1f0e:	dc f7       	brge	.-10     	; 0x1f06 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1f10:	ec e2       	ldi	r30, 0x2C	; 44
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
}
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <UART_sendString+0x6>
    1f22:	0f 92       	push	r0
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	9b 83       	std	Y+3, r25	; 0x03
    1f2a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f2c:	19 82       	std	Y+1, r1	; 0x01
    1f2e:	0e c0       	rjmp	.+28     	; 0x1f4c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	80 81       	ld	r24, Z
    1f42:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <UART_sendByte>
		i++;
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	8f 5f       	subi	r24, 0xFF	; 255
    1f4a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	fc 01       	movw	r30, r24
    1f58:	e2 0f       	add	r30, r18
    1f5a:	f3 1f       	adc	r31, r19
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 23       	and	r24, r24
    1f60:	39 f7       	brne	.-50     	; 0x1f30 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <UART_receiveString+0xa>
    1f78:	0f 92       	push	r0
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
    1f7e:	9b 83       	std	Y+3, r25	; 0x03
    1f80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f82:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8e:	8c 01       	movw	r16, r24
    1f90:	02 0f       	add	r16, r18
    1f92:	13 1f       	adc	r17, r19
    1f94:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	9b 81       	ldd	r25, Y+3	; 0x03
    1fae:	8c 01       	movw	r16, r24
    1fb0:	02 0f       	add	r16, r18
    1fb2:	13 1f       	adc	r17, r19
    1fb4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <UART_recieveByte>
    1fb8:	f8 01       	movw	r30, r16
    1fba:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	28 2f       	mov	r18, r24
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	e2 0f       	add	r30, r18
    1fca:	f3 1f       	adc	r31, r19
    1fcc:	80 81       	ld	r24, Z
    1fce:	83 32       	cpi	r24, 0x23	; 35
    1fd0:	31 f7       	brne	.-52     	; 0x1f9e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	10 82       	st	Z, r1
}
    1fe4:	0f 90       	pop	r0
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <__mulsi3>:
    1ff4:	62 9f       	mul	r22, r18
    1ff6:	d0 01       	movw	r26, r0
    1ff8:	73 9f       	mul	r23, r19
    1ffa:	f0 01       	movw	r30, r0
    1ffc:	82 9f       	mul	r24, r18
    1ffe:	e0 0d       	add	r30, r0
    2000:	f1 1d       	adc	r31, r1
    2002:	64 9f       	mul	r22, r20
    2004:	e0 0d       	add	r30, r0
    2006:	f1 1d       	adc	r31, r1
    2008:	92 9f       	mul	r25, r18
    200a:	f0 0d       	add	r31, r0
    200c:	83 9f       	mul	r24, r19
    200e:	f0 0d       	add	r31, r0
    2010:	74 9f       	mul	r23, r20
    2012:	f0 0d       	add	r31, r0
    2014:	65 9f       	mul	r22, r21
    2016:	f0 0d       	add	r31, r0
    2018:	99 27       	eor	r25, r25
    201a:	72 9f       	mul	r23, r18
    201c:	b0 0d       	add	r27, r0
    201e:	e1 1d       	adc	r30, r1
    2020:	f9 1f       	adc	r31, r25
    2022:	63 9f       	mul	r22, r19
    2024:	b0 0d       	add	r27, r0
    2026:	e1 1d       	adc	r30, r1
    2028:	f9 1f       	adc	r31, r25
    202a:	bd 01       	movw	r22, r26
    202c:	cf 01       	movw	r24, r30
    202e:	11 24       	eor	r1, r1
    2030:	08 95       	ret

00002032 <__divmodhi4>:
    2032:	97 fb       	bst	r25, 7
    2034:	09 2e       	mov	r0, r25
    2036:	07 26       	eor	r0, r23
    2038:	0a d0       	rcall	.+20     	; 0x204e <__divmodhi4_neg1>
    203a:	77 fd       	sbrc	r23, 7
    203c:	04 d0       	rcall	.+8      	; 0x2046 <__divmodhi4_neg2>
    203e:	2e d0       	rcall	.+92     	; 0x209c <__udivmodhi4>
    2040:	06 d0       	rcall	.+12     	; 0x204e <__divmodhi4_neg1>
    2042:	00 20       	and	r0, r0
    2044:	1a f4       	brpl	.+6      	; 0x204c <__divmodhi4_exit>

00002046 <__divmodhi4_neg2>:
    2046:	70 95       	com	r23
    2048:	61 95       	neg	r22
    204a:	7f 4f       	sbci	r23, 0xFF	; 255

0000204c <__divmodhi4_exit>:
    204c:	08 95       	ret

0000204e <__divmodhi4_neg1>:
    204e:	f6 f7       	brtc	.-4      	; 0x204c <__divmodhi4_exit>
    2050:	90 95       	com	r25
    2052:	81 95       	neg	r24
    2054:	9f 4f       	sbci	r25, 0xFF	; 255
    2056:	08 95       	ret

00002058 <__udivmodsi4>:
    2058:	a1 e2       	ldi	r26, 0x21	; 33
    205a:	1a 2e       	mov	r1, r26
    205c:	aa 1b       	sub	r26, r26
    205e:	bb 1b       	sub	r27, r27
    2060:	fd 01       	movw	r30, r26
    2062:	0d c0       	rjmp	.+26     	; 0x207e <__udivmodsi4_ep>

00002064 <__udivmodsi4_loop>:
    2064:	aa 1f       	adc	r26, r26
    2066:	bb 1f       	adc	r27, r27
    2068:	ee 1f       	adc	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	a2 17       	cp	r26, r18
    206e:	b3 07       	cpc	r27, r19
    2070:	e4 07       	cpc	r30, r20
    2072:	f5 07       	cpc	r31, r21
    2074:	20 f0       	brcs	.+8      	; 0x207e <__udivmodsi4_ep>
    2076:	a2 1b       	sub	r26, r18
    2078:	b3 0b       	sbc	r27, r19
    207a:	e4 0b       	sbc	r30, r20
    207c:	f5 0b       	sbc	r31, r21

0000207e <__udivmodsi4_ep>:
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	1a 94       	dec	r1
    2088:	69 f7       	brne	.-38     	; 0x2064 <__udivmodsi4_loop>
    208a:	60 95       	com	r22
    208c:	70 95       	com	r23
    208e:	80 95       	com	r24
    2090:	90 95       	com	r25
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	bd 01       	movw	r22, r26
    2098:	cf 01       	movw	r24, r30
    209a:	08 95       	ret

0000209c <__udivmodhi4>:
    209c:	aa 1b       	sub	r26, r26
    209e:	bb 1b       	sub	r27, r27
    20a0:	51 e1       	ldi	r21, 0x11	; 17
    20a2:	07 c0       	rjmp	.+14     	; 0x20b2 <__udivmodhi4_ep>

000020a4 <__udivmodhi4_loop>:
    20a4:	aa 1f       	adc	r26, r26
    20a6:	bb 1f       	adc	r27, r27
    20a8:	a6 17       	cp	r26, r22
    20aa:	b7 07       	cpc	r27, r23
    20ac:	10 f0       	brcs	.+4      	; 0x20b2 <__udivmodhi4_ep>
    20ae:	a6 1b       	sub	r26, r22
    20b0:	b7 0b       	sbc	r27, r23

000020b2 <__udivmodhi4_ep>:
    20b2:	88 1f       	adc	r24, r24
    20b4:	99 1f       	adc	r25, r25
    20b6:	5a 95       	dec	r21
    20b8:	a9 f7       	brne	.-22     	; 0x20a4 <__udivmodhi4_loop>
    20ba:	80 95       	com	r24
    20bc:	90 95       	com	r25
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	08 95       	ret

000020c4 <__prologue_saves__>:
    20c4:	2f 92       	push	r2
    20c6:	3f 92       	push	r3
    20c8:	4f 92       	push	r4
    20ca:	5f 92       	push	r5
    20cc:	6f 92       	push	r6
    20ce:	7f 92       	push	r7
    20d0:	8f 92       	push	r8
    20d2:	9f 92       	push	r9
    20d4:	af 92       	push	r10
    20d6:	bf 92       	push	r11
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	ca 1b       	sub	r28, r26
    20ee:	db 0b       	sbc	r29, r27
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	09 94       	ijmp

000020fc <__epilogue_restores__>:
    20fc:	2a 88       	ldd	r2, Y+18	; 0x12
    20fe:	39 88       	ldd	r3, Y+17	; 0x11
    2100:	48 88       	ldd	r4, Y+16	; 0x10
    2102:	5f 84       	ldd	r5, Y+15	; 0x0f
    2104:	6e 84       	ldd	r6, Y+14	; 0x0e
    2106:	7d 84       	ldd	r7, Y+13	; 0x0d
    2108:	8c 84       	ldd	r8, Y+12	; 0x0c
    210a:	9b 84       	ldd	r9, Y+11	; 0x0b
    210c:	aa 84       	ldd	r10, Y+10	; 0x0a
    210e:	b9 84       	ldd	r11, Y+9	; 0x09
    2110:	c8 84       	ldd	r12, Y+8	; 0x08
    2112:	df 80       	ldd	r13, Y+7	; 0x07
    2114:	ee 80       	ldd	r14, Y+6	; 0x06
    2116:	fd 80       	ldd	r15, Y+5	; 0x05
    2118:	0c 81       	ldd	r16, Y+4	; 0x04
    211a:	1b 81       	ldd	r17, Y+3	; 0x03
    211c:	aa 81       	ldd	r26, Y+2	; 0x02
    211e:	b9 81       	ldd	r27, Y+1	; 0x01
    2120:	ce 0f       	add	r28, r30
    2122:	d1 1d       	adc	r29, r1
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	ed 01       	movw	r28, r26
    2130:	08 95       	ret

00002132 <strcmp>:
    2132:	fb 01       	movw	r30, r22
    2134:	dc 01       	movw	r26, r24
    2136:	8d 91       	ld	r24, X+
    2138:	01 90       	ld	r0, Z+
    213a:	80 19       	sub	r24, r0
    213c:	01 10       	cpse	r0, r1
    213e:	d9 f3       	breq	.-10     	; 0x2136 <strcmp+0x4>
    2140:	99 0b       	sbc	r25, r25
    2142:	08 95       	ret

00002144 <_exit>:
    2144:	f8 94       	cli

00002146 <__stop_program>:
    2146:	ff cf       	rjmp	.-2      	; 0x2146 <__stop_program>
